using System;
using BLL.Contract;
using Entities;

namespace BLL.Implementations
{
    public class DataTransferValidator : IValidator<DataTransfer>
    {
        private readonly string[] validCurrencyCodes = new string[]
           {
            "USD",
            "EUR",
            "GBP",
            "JPY",
            "CHF",
            "CNY",
            "RUB",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "AOA",
            "ARS",
            "AUD",
            "AZN",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BND",
            "BOB",
            "BRL",
            "BWP",
            "BYN",
            "CAD",
            "CDF",
            "CLP",
            "COP",
            "CRC",
            "CUP",
            "CZK",
            "DJF",
            "DKK",
            "DZD",
            "EGP",
            "ETB",
            "GEL",
            "GHS",
            "GMD",
            "GNF",
            "HKD",
            "HRK",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JOD",
            "KES",
            "KGS",
            "KHR",
            "KPW",
            "KRW",
            "KWD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MRO",
            "MUR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PEN",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "SAR",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SLL",
            "SOS",
            "SRD",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TRY",
            "TWD",
            "TZS",
            "UGX",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "XAF",
            "XDR",
            "XOF",
            "YER",
            "ZAR",
            "ZMK",
           };

        private readonly string[] validCountryCodes = new string[]
        {
            "AUS",
            "AUT",
            "AZE",
            "ALB",
            "DZA",
            "AIA",
            "AGO",
            "AND",
            "ATA",
            "ATG",
            "ANT",
            "MAC",
            "ARG",
            "ARM",
            "ABW",
            "AFG",
            "BHS",
            "BGD",
            "BRB",
            "BHR",
            "BLZ",
            "BLR",
            "BEL",
            "BEN",
            "BMU",
            "BGR",
            "BOL",
            "BIH",
            "BWA",
            "BRA",
            "IOT",
            "BRN",
            "BVT",
            "BFA",
            "BDI",
            "BTN",
            "VUT",
            "VAT",
            "GBR",
            "HUN",
            "VEN",
            "VGB",
            "VIR",
            "ASM",
            "TMP",
            "VNM",
            "GAB",
            "HTI",
            "GUY",
            "GMB",
            "GHA",
            "GLP",
            "GTM",
            "GUF",
            "GIN",
            "GNB",
            "DEU",
            "GIB",
            "HND",
            "GRD",
            "GRL",
            "GRC",
            "GEO",
            "GUM",
            "DNK",
            "DJI",
            "DMA",
            "DOM",
            "EGY",
            "ZAR",
            "ZMB",
            "ESH",
            "WSM",
            "ZWE",
            "ISR",
            "IND",
            "IDN",
            "JOR",
            "IRQ",
            "IRN",
            "IRL",
            "ISL",
            "ESP",
            "ITA",
            "YEM",
            "CPV",
            "KAZ",
            "CYM",
            "KHM",
            "CMR",
            "CAN",
            "QAT",
            "KEN",
            "CYP",
            "KGZ",
            "KIR",
            "CCK",
            "CHN",
            "COL",
            "СОМ",
            "COG",
            "PRK",
            "KOR",
            "CRI",
            "CIV",
            "CUB",
            "KWT",
            "СОК",
            "LAO",
            "LVA",
            "LSO",
            "LBR",
            "LBN",
            "LBY",
            "LTU",
            "LIE",
            "LUX",
            "MUS",
            "MRT",
            "MDG",
            "MKD",
            "MWI",
            "MYS",
            "MLI",
            "MDV",
            "MLT",
            "MYT",
            "MAR",
            "MTQ",
            "MHL",
            "МЕХ",
            "UMI",
            "FSM",
            "MOZ",
            "MDA",
            "MCO",
            "MNG",
            "MSR",
            "MMR",
            "NAM",
            "NRU",
            "NPL",
            "NER",
            "NGA",
            "NLD",
            "NIC",
            "NIU",
            "NZL",
            "NCL",
            "NOR",
            "NFK",
            "ARE",
            "OMN",
            "РАК",
            "PLW",
            "PAN",
            "PNG",
            "PRY",
            "PER",
            "PCN",
            "POL",
            "PRT",
            "PRI",
            "REU",
            "CXR",
            "RUS",
            "RWA",
            "ROM",
            "SLV",
            "SMR",
            "STP",
            "SAU",
            "SWZ",
            "SJM",
            "SHN",
            "MNP",
            "SYC",
            "SEN",
            "SPM",
            "VCT",
            "KNA",
            "LCA",
            "SGP",
            "SYR",
            "SVK",
            "SVN",
            "USA",
            "SLB",
            "SOM",
            "SDN",
            "SUR",
            "SLE",
            "HKG",
            "TJK",
            "THA",
            "TWN",
            "TZA",
            "TCA",
            "TGO",
            "TKL",
            "TON",
            "TTO",
            "TUV",
            "TUN",
            "TKM",
            "TUR",
            "UGA",
            "UZB",
            "UKR",
            "WLF",
            "URY",
            "FRO",
            "FJI",
            "PHL",
            "FIN",
            "FLK",
            "FRA",
            "FXX",
            "PYF",
            "ATF",
            "HMD",
            "HRV",
            "CAF",
            "TCD",
            "CZE",
            "CHL",
            "СНЕ",
            "SWE",
            "LKA",
            "ECU",
            "GNQ",
            "ERI",
            "EST",
            "ETH",
            "YUG",
            "SGS",
            "ZAF",
            "JAM",
            "JPN",
        };

        public void Validate(DataTransfer value)
        {
            if (value is null)
            {
                throw new ArgumentNullException(nameof(value), "Value must be not null.");
            }

            if (value.Cost < 0)
            {
                throw new ArgumentException("Cost can't be negative.", nameof(value));
            }

            if (value.AmountOfTrades < 0)
            {
                throw new ArgumentException("Amount of trades can't be negative.", nameof(value));
            }

            bool validResult = false;
            foreach (string validCode in this.validCurrencyCodes)
            {
                if (validCode.Equals(value.CurrencyCode, StringComparison.InvariantCulture))
                {
                    validResult = true;
                    break;
                }
            }

            if (!validResult)
            {
                throw new ArgumentException("Invalid currency code.", nameof(value));
            }

            validResult = false;
            foreach (string validCode in this.validCountryCodes)
            {
                if (validCode.Equals(value.CountryCode, StringComparison.InvariantCulture))
                {
                    validResult = true;
                    break;
                }
            }

            if (!validResult)
            {
                throw new ArgumentException("Invalid country code.", nameof(value));
            }
        }
    }
}
